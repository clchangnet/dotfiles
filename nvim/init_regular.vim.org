call plug#begin('~/.config/nvim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'fatih/vim-go'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-commentary'
Plug 'kassio/neoterm'
Plug 'easymotion/vim-easymotion'
Plug 'liuchengxu/vim-which-key'
Plug 'mhinz/vim-startify'
" Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': './install --all' } | Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Initialize plugin system
call plug#end()

set number
set splitright
colorscheme cosmic_latte
let mapleader = ","

map <leader>s :source ~/.config/nvim/init.vim<CR>
map <leader>ev :e ~/dotfiles/nvim/init_regular.vim<CR>


" -------------------------------------------------------------------------------------------------
" Standard Bindings
" -------------------------------------------------------------------------------------------------
" nnoremap <C-t> :!touch<Space>
" nnoremap <C-e> :!crf<Space>
" nnoremap <C-d> :!mkdir<Space>
" nnoremap <C-m> :!mv<Space>%<Space>

" splits navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set splitbelow
set splitright
set spelllang=en

" markdown wrap 80
au BufRead,BufNewFile *.md setlocal textwidth=80

" quickly toggle term
" nnoremap <silent> <leader>o :vertical botright Ttoggle<cr><C-w>l
" nnoremap <silent> <leader>O :botright Ttoggle<cr><C-w>j
nnoremap <silent> <leader><space> :vertical botright Ttoggle<cr><C-w>l

let g:goyo_linenr=1
let g:goyo_width=120
map <leader>g :Goyo<CR>
map <leader>G :Goyo!<CR>

" clipboard
vnoremap  <leader>y  "+y
nnoremap <leader>p "+p

" search and center
:nnoremap n nzz
:nnoremap N Nzz
:nnoremap * *zz
:nnoremap # #zz
:nnoremap g* g*zz
:nnoremap g# g#zz
" hi Search guibg=LightBlue
nnoremap <esc><esc> :silent! nohls<cr>

" TAB in general mode will move to text buffer
nnoremap <TAB> :bnext<CR>
" SHIFT-TAB will go back
nnoremap <S-TAB> :bprevious<CR>

" which key
let g:maplocalleader = "\<Space>"
let g:mapleader = ','
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>

" FZF
let g:fzf_history_dir = '~/.local/share/fzf-history'
" map <C-f> :Files<CR>

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

map <leader>b :Buffers<CR>
nnoremap <leader>g :Rg<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>m :Marks<CR>

" distinct  highlight current, first and last match when searching
function! HLCurrent() abort
	if exists("currmatch")
		call matchdelete(currmatch)
	endif
	" only on cursor
	let patt = '\c\%#'.@/
	" check prev and next match
	let prevmatch = search(@/, 'bWn')
	let nextmatch = search(@/, 'Wn')
	" if on first or last match
	if prevmatch == 0 || nextmatch == 0
		let currmatch = matchadd('EdgeSearch', patt, 101)
	else
		let currmatch = matchadd('IncSearch', patt, 101)
	endif
	redraw
endfunction

nnoremap <silent> n n:call HLCurrent()<cr>
nnoremap <silent> N N:call HLCurrent()<cr>

" coc-explorer
nmap <space>n :CocCommand explorer --position right<CR>
nmap <space>ng :CocCommand explorer --position right ~/webdev/go/src/github.com/clchangnet/<CR>

" disable vim-go mapping, use coc
let g:go_def_mapping_enabled=0

" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
